{"version":3,"sources":["api/url.js","redux/actions/configuracion.js","redux/actions/personlexpenses.js","redux/actions/revenues.js","redux/actions/index.js","utils/errors.js","redux/actions/expensestype.js","services/expenses/expensestype.js","api/typeexpense/typeexpense.js","views/layout/main.js","views/components/loading.js","views/components/carrucelinfinite.js","views/Widgets/Widget02.js","views/Dashboard/gbarras.js","views/Dashboard/table.js","traslate/es/dashboard.js","views/Dashboard/Dashboard.js","api/dashboard.js"],"names":["connection","host","window","location","URL","API_TOKEN","localStorage","getItem","id","JSON","parse","setConfiguracion","payload","type","setPersonalexpense","setPersonalexpenses","setRevenueIndex","setRevenueStore","setRevenueShow","setRevenueUpdate","setRevenueDelete","actions","configuracion","personalexpenses","expensestype","revenues","handleErrors","response","console","log","success","messg","errors","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","reload","generalErrorApi","setExpensestype","getExpensesType","async","expensestypes","fetch","concat","url","json","getExpensesTyped","store","dispatch","e","createExpenseType","createExpense","method","headers","Accept","body","stringify","api_token","tipogastos_name","data","tipogastos_active","tipogastos_usuario","saveExpenseType","Main","props","children","visible","setVisible","useState","React","createElement","Loading","Fragment","className","Carrucelinfinite","Widget02","Component","render","_this$props","this","cssModule","header","mainText","color","footer","link","variant","attributes","_objectWithoutProperties","_excluded","padding","card","lead","style","classes","mapToCssModules","classNames","Card","CardBody","Object","assign","blockIcon","CardFooter","href","cardFooter","defaultProps","Gbarras","constructor","super","state","gastoTotal","mes","borderRadius","CardHeader","Bar","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","map","item","precio_total_mes","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","Datos","coming_soon","coming_soon_item1","news","news_item1","news_item2","news_item3","to_explore","btn_en","btn_es","btn_fr","my_expenses","Dashboard","loading","valueSelectExpensestype","languaje","dasboard_es","btn_color","getExpensesMonths","getExpensesMonth","gasto","setState","getTotalExpensesMonth","err","getTotalExpensesMonths","Select","onChange","newValue","onChangeSelect","Intl","NumberFormat","format","toString","connect","expense","createpersonalexpense"],"mappings":"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","file":"static/js/22.a8ac2e9c.chunk.js","sourcesContent":["\n/**\n*Peticiones api\n* @author John Alejandro || @Johnssther\n* @link http://johnalejandro.com\n* link Api\n* http://coysa.herokuapp.com/api/\n*/\n\nexport const connection = () => {\n    const host = window.location.host\n    let URL = null;\n    const API_TOKEN = localStorage.getItem('token');\n\n    if (host === \"localhost:3000\") {\n        URL = \"http://localhost/coysa-laravel6/public/api/\";\n    }\n    if (host === \"johnssther.github.io\") {\n        URL = \"https://x.johnr.top/api/\";\n    }\n    if (host === \"http://159.65.226.161:3000\") {\n        URL = \"http://localhost/coysa-laravel6/public/api/\";\n    }\n\n    URL = \"https://x.johnr.top/api/\";\n\n    return { URL, API_TOKEN }\n};\n\nexport default {\n    URL: connection().URL,\n    API_TOKEN: connection().API_TOKEN,\n    id:JSON.parse(localStorage.getItem('auth')) == null ? null:JSON.parse(localStorage.getItem('auth')).id\n}","export const setConfiguracion = payload => {\n    return {\n        type: 'SET_CONFIGURACION',\n        payload\n    }\n}","export const setPersonalexpense = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSE',\n        payload\n    }\n}\n\nexport const setPersonalexpenses = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSES',\n        payload\n    }\n}","export const setRevenueIndex = payload => {\n    return {\n        type: 'SET_REVENUE_INDEX',\n        payload\n    }\n}\n\nexport const setRevenueStore = payload => {\n    return {\n        type: 'SET_REVENUE_STORE',\n        payload\n    }\n}\n\nexport const setRevenueShow = payload => {\n    return {\n        type: 'SET_REVENUE_SHOW',\n        payload\n    }\n}\n\nexport const setRevenueUpdate = payload => {\n    return {\n        type: 'SET_REVENUE_UPDATE',\n        payload\n    }\n}\n\nexport const setRevenueDelete = payload => {\n    return {\n        type: 'SET_REVENUE_DELETE',\n        payload\n    }\n}","import * as configuracion from './configuracion'\nimport * as personalexpenses from './personlexpenses'\nimport * as expensestype from './expensestype'\nimport * as revenues from './revenues'\n\nexport const actions = {\n    configuracion,\n    personalexpenses,\n    expensestype,\n    revenues,\n}","import Swal from 'sweetalert2'\n\nexport const handleErrors = response => {\n    console.log(response);\n\n    //errores del api\n    if (response.success === false) {\n        throw response;\n    }\n    //otros errores\n    if (response) {\n        let messg = {\n            success: false,\n            errors: 'Ocurrio un error inesperado de conexión por favor recargue su navegador nuevamente.'\n        }\n        Swal.fire({\n            title: 'Atención',\n            text: messg.errors,\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Si, recargar de nuevo'\n        }).then((result) => {\n            if (result.value) {\n                window.location.reload();\n\n            }\n        })\n        if (response !== \"TypeError: Failed to fetch\") {\n            throw messg;\n        }\n        throw messg;\n\n    }\n};\n\nexport const generalErrorApi = response => {\n    throw response\n};\n\n/*\nresponseServer: function ( model, resp, opts ) {\n    window.Misc.removeSpinner(this.spinner);\n    if (!_.isUndefined(resp.success)) {\n        // response success or error\n        var text = resp.success ? '' : resp.errors;\n        if (_.isObject(resp.errors)) {\n            text = window.Misc.parseErrors(resp.errors);\n        }\n\n        if (!resp.success) {\n            alertify.error(text);\n            return;\n        }\n\n        window.Misc.redirect(window.Misc.urlFull(Route.route('facturas.show', {facturas: resp.id})));\n    }\n\n       /**\n        * Build URI with route and base url\n        */\n     /*  parseErrors: function ( errors ){\n        var text = '';\n        if( _.isObject( errors ) ){\n\n            var listError = '<ul>';\n\n            $.each(errors, function(field, item) {\n                 listError += '<li>'+ item[0] +'</li>';\n            });\n            listError += '</ul>';\n\n            text = listError;\n        }\n        return text;\n    },\n\n    */","export const setExpensestype = payload => {\n    return {\n        type: 'SET_EXPENSES_TYPE',\n        payload\n    }\n}","import { getExpensesTyped, saveExpenseType } from '../../api/typeexpense/typeexpense';\n\nimport { handleErrors } from '../../utils/errors';\nimport { actions } from '../../redux/actions/index';\nimport { store } from '../../store';\n\nexport const getExpensesType = async () => {\n    try {\n        let expensestypes = await getExpensesTyped();\n        store.dispatch(actions.expensestype.setExpensestype(expensestypes))\n    } catch (e) {\n        handleErrors(e)\n    }\n}\n\n//store\nexport const createExpenseType = async (data) => {\n    try {\n        const createExpense = await saveExpenseType(data);\n        console.log(createExpense);\n    } catch (e) {\n        handleErrors(e)\n    }\n}","import url from '../url';\n\nexport const getExpensesTyped = async () => {\n    const response = await fetch(`${url.URL}tipogastos?api_token=${url.API_TOKEN}&user_id=${url.id}`)\n    return await response.json();\n};\nexport const saveExpenseType = async (data) => {\n    const response = await fetch(`${url.URL}tipogastos`,\n        {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                api_token: url.API_TOKEN,\n                tipogastos_name: data.tipogastos_name,\n                tipogastos_active: data.tipogastos_active,\n                tipogastos_usuario: data.tipogastos_usuario,\n            }),\n        },\n    );\n\n    return await response.json();\n};\n","import React, { useState } from 'react';\nimport {\n    Container,\n    Alert\n} from 'reactstrap';\nimport Errors from '../components/error'\n\nconst Main = (props) => {\n    const { children, success } = props;\n    \n    const [visible, setVisible] = useState(true);\n    const onDismiss = () => setVisible(false);\n\n    return (\n        <div>\n            {/* {success.success === false ? null :\n                <Alert className=\"bg-danger\" isOpen={visible}>\n                    <b>Error: {success.error}</b><br></br>\n                    <b>{success.error === 'Error de conexion' ? 'Ocurrio un error inesperado al momento de intetar establecer conexión por favor recargue su navegador nuevamente.':''}  </b><br></br>\n                </Alert>\n            } */}\n            {/* <Errors text={success} /> */}\n            {children}\n        </div>\n    );\n};\n\nexport default Main","import React from 'react';\nimport './loading.css';\nimport Swal from 'sweetalert2'\n\n\nfunction Loading() {\n\n    return (\n        <>\n            <div className=\"container\">\n\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-4\">\n                        <div className=\"container center-block\">\n\n                            <div className=\"lds-facebook\">\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                            </div>\n                            <h4>Cargando...</h4>\n\n\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}\n\nexport default Loading;","import React from 'react';\nimport InfiniteCarousel from 'react-leaf-carousel';\n\nimport {\n    Card, CardBody,\n    CardHeader,\n} from 'reactstrap';\n\nfunction Carrucelinfinite(props) {\n    const { data, color } = props\n    console.log(data, 'data');\n    console.log(color, 'color');\n\n    let mes_nombre = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre',]\n\n    return (\n        <div className=\"row\">\n        {\n            data.map((item, index) => {\n                return (\n                    <div className=\"col\" key={index}>\n                        <Card style={{ borderRadius: 20 }}>\n                            <CardHeader className=\"text-white\" style={{ background: color, borderTopLeftRadius: 20, borderTopRightRadius: 20 }}>\n                                <h4> {mes_nombre[item.mes - 1]} {item.anio} </h4>\n                            </CardHeader>\n                            <CardBody className=\"text-white\" style={{ background: color, borderBottomLeftRadius: 20, borderBottomRightRadius: 20 }}>\n                                Gastos: <h3> {`$ ${new Intl.NumberFormat().format(item.precio_total_mes)}`} </h3>\n                                <hr></hr>\n                            </CardBody>\n                        </Card>\n                    </div>\n                )\n            })\n        }\n        </div>\n\n    );\n}\n\nexport default Carrucelinfinite;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter } from 'reactstrap';\nimport classNames from 'classnames';\nimport { mapToCssModules } from 'reactstrap/lib/utils';\n\nconst propTypes = {\n  header: PropTypes.string,\n  mainText: PropTypes.string,\n  icon: PropTypes.string,\n  color: PropTypes.string,\n  variant: PropTypes.string,\n  footer: PropTypes.bool,\n  link: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};\n\nconst defaultProps = {\n  header: '$1,999.50',\n  mainText: 'Income',\n  icon: 'fa fa-cogs',\n  color: 'primary',\n  variant: '0',\n  link: '#',\n};\n\nclass Widget02 extends Component {\n  render() {\n    const { className, cssModule, header, mainText, icon, color, footer, link, children, variant, ...attributes } = this.props;\n\n    // demo purposes only\n    const padding = (variant === '0' ? { card: 'p-3', icon: 'p-3', lead: 'mt-2' } : (variant === '1' ? {\n      card: 'p-0', icon: 'p-4', lead: 'pt-3',\n    } : { card: 'p-0', icon: 'p-4 px-5', lead: 'pt-3' }));\n\n    const card = { style: 'clearfix', color: color, icon: icon, classes: '' };\n    card.classes = mapToCssModules(classNames(className, card.style, padding.card), cssModule);\n\n    const lead = { style: 'h5 mb-0', color: color, classes: '' };\n    lead.classes = classNames(lead.style, 'text-' + card.color, padding.lead);\n\n    const blockIcon = function (icon) {\n      const classes = classNames(icon, 'bg-' + card.color, padding.icon, 'font-2xl mr-3 float-left');\n      return (<i className={classes}></i>);\n    };\n\n    const cardFooter = function () {\n      if (footer) {\n        return (\n          <CardFooter className=\"px-3 py-2\">\n            <a className=\"font-weight-bold font-xs btn-block text-muted\" href={link}>Ver Más\n              <i className=\"fa fa-angle-right float-right font-lg\"></i></a>\n          </CardFooter>\n        );\n      }\n    };\n\n    return (\n      <Card>\n        <CardBody className={card.classes} {...attributes}>\n          {blockIcon(card.icon)}\n          <div className={lead.classes}>{header}</div>\n          <div className=\"text-muted text-uppercase font-weight-bold font-xs\">{mainText}</div>\n        </CardBody>\n        {cardFooter()}\n      </Card>\n    );\n  }\n}\n\nWidget02.propTypes = propTypes;\nWidget02.defaultProps = defaultProps;\n\nexport default Widget02;","\nimport React, { Component } from 'react';\nimport WidgetO from '../Widgets/Widget02'\n// Main Chart\nimport ApiDashboard from '../../api/dashboard';\nimport {\n  Card, CardBody,\n  CardHeader,\n  CardColumns\n} from 'reactstrap';\nimport Loading from '../components/loading'\n\nimport { Bar, Doughnut, Line, Pie, Polar, Radar } from 'react-chartjs-2';\n\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\n\nclass Gbarras extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gastoTotal: '',\n    }\n  }\n\n  render() {\n    const mes = this.props.mes;\n    console.log(mes, 'a');\n\n    return (\n      <>\n        <Card style={{ borderRadius:'10px' }}>\n          <CardHeader style={{ borderRadius:'10px 10px 0px 0px' }}>\n            Histograma del 2025\n              <div className=\"card-header-actions\">\n            </div>\n          </CardHeader>\n          <CardBody>\n            <div className=\"chart-wrapper\">\n              <Bar\n                data={\n                  {\n                    labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n                    datasets: [\n                      {\n                        label: 'Gastos mensuales',\n                        backgroundColor: this.props.color,\n                        borderColor: 'rgba(255,99,132,1)',\n                        borderWidth: 1,\n                        hoverBackgroundColor: 'rgba(168,132,8,66)',\n                        hoverBorderColor: 'rgba(255,99,132,1)',\n                        data: mes.map((item) => item.precio_total_mes),\n                      },\n                    ],\n                  }\n                }\n                options={\n                  {\n                    tooltips: {\n                      enabled: false,\n                      custom: CustomTooltips\n                    },\n                    maintainAspectRatio: false\n                  }\n                } />\n            </div>\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n\n}\n\nexport default Gbarras;","\nimport React, { Component } from 'react';\n\nimport {\n    Card, CardBody,\n    CardHeader,\n    CardColumns,\n    Badge,\n    Table,\n    Pagination,\n    PaginationItem,\n    PaginationLink,\n} from 'reactstrap';\n\nclass Datos extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            gastoTotal: '',\n\n        }\n    }\n    componentDidMount() {\n\n    }\n\n\n    render() {\n        const mes = this.props.mes;\n        console.log(mes, 'a');\n\n        return (\n            <>\n\n                <Card>\n                    <CardHeader>\n                        <i className=\"fa fa-align-justify\"></i> Mis finanzas en el año. <Badge color=\"success\">Beta</Badge>\n                    </CardHeader>\n                    <CardBody>\n                        <Table responsive striped>\n                            <thead>\n                                <tr style={{ background:'#FFA73D', color:'white' }}>\n                                    <th>2020</th>\n                                    <th>Enero</th>\n                                    <th>Febrero</th>\n                                    <th>Marzo</th>\n                                    <th>Abril</th>\n                                    <th>Mayo</th>\n                                    <th>Junio</th>\n                                    <th>Julio</th>\n                                    <th>Agosto</th>\n                                    <th>Septiembre</th>\n                                    <th>Octubre</th>\n                                    <th>Noviembre</th>\n                                    <th>Diciembre</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"success\">Ingresos</Badge>\n                                    </td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"danger\">Gastos</Badge>\n                                    </td>\n                                    <td>$600.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$0</td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"warning\">Ahorro</Badge>\n                                    </td>\n                                    <td>$1.800.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$0</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </CardBody>\n                </Card>\n            </>\n        );\n    }\n\n}\n\nexport default Datos;\n\n\n","export default {\n    coming_soon: 'Proximamente:',\n    coming_soon_item1: 'Seleccionar su idioma preferido (Multiidioma).',\n    news: 'Novedades',\n    news_item1: '-Ahora puedes registrar tus ingresos y verlos en el modulo de ingresos que hemos creado para tí.',\n    news_item2: '-Una vista mas limpia y minimalista.',\n    news_item3: '-Aun continuamos mejorando.',\n    to_explore: 'Explorar',\n    btn_en:'Ingles',\n    btn_es:'Español',\n    btn_fr:'Frances',\n    my_expenses:'Mis Gastos'\n}\n","\nimport React, { Component } from 'react';\n// Main Chart\nimport { getTotalExpensesMonths, getTotalExpensesMonth } from '../../api/dashboard';\n\nimport Carrucelinfinite from '../components/carrucelinfinite';\nimport { Link } from 'react-router-dom';\nimport Main from '../layout/main'\n\nimport {\n  Card, CardBody,\n  Alert,\n} from 'reactstrap';\n\nimport Loading from '../components/loading'\nimport Gbarras from '../Dashboard/gbarras'\nimport Datos from '../Dashboard/table'\n\nimport { connect } from 'react-redux'\nimport Select from 'react-select'\n\nimport { getExpensesType } from '../../services/expenses/expensestype'\n\n//traslate\nimport dasboard_es from '../../traslate/es/dashboard'\nimport dasboard_en from '../../traslate/en/dashboard'\nimport dasboard_fr from '../../traslate/fr/dashboard'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gastoTotal: '',\n      mes: [],\n      loading: true,\n      expensestype: [],\n      valueSelectExpensestype: '',\n      color: '#F55457',\n      languaje: dasboard_es,\n      btn_color: false,\n    }\n  }\n  async componentDidMount() {\n    this.getExpensesMonths()\n    this.getExpensesMonth()\n    await getExpensesType();\n\n    const expensestype = await this.props.expensestypes.map((item) => {\n      return { value: item.id, label: item.gasto }\n    })\n\n    this.setState({ expensestype })\n\n  }\n\n  //getExpenseMont card\n  async getExpensesMonth(data) {\n    try {\n      const response = await getTotalExpensesMonth(data)\n      this.setState({ gastoTotal: response, loading: false });\n\n    } catch (err) {\n      console.log(err)\n      this.setState({\n        loading: false\n      });\n    }\n  }\n  async getExpensesMonths() {\n    try {\n      const response = await getTotalExpensesMonths()\n      this.setState({ mes: response, loading: false});\n\n    } catch (err) {\n      console.log(err)\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  //getExpenseMonts\n  async onChangeSelect(value) {\n    await this.setState({ valueSelectExpensestype: value })\n    this.getExpensesMonth(this.state.valueSelectExpensestype)\n  }\n\n  render() {\n    const { languaje, btn_color } = this.state\n    if (this.state.loading) {\n      return (\n        <Loading loading={this.state.loading}></Loading>\n      );\n    }\n    return (\n      <Main success={false}>\n         <div className=\"offset-sm-3 col-sm-6\">\n            <Select\n              className=\"is-invalid\"\n              options={this.state.expensestype}\n              onChange={(newValue) => { this.onChangeSelect(newValue.value) }}\n            />\n          </div><br></br>\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Card style={{ borderRadius: '10px' }}>\n              <CardBody>\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <h6>{languaje.my_expenses}</h6>\n                    <h3>{'$' + new Intl.NumberFormat().format(this.state.gastoTotal.toString())}</h3>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Gbarras mes={this.state.mes} color={this.state.color} />\n          </div>\n        </div>\n        {/* <Datos /> */}\n      </Main>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  expensestypes: state.expensestype.expensestype,\n  expense: state.personalexpenses.createpersonalexpense,\n})\n\nexport default connect(mapStateToProps)(Dashboard)\n","import url from './url';\n\nexport const getTotalExpensesMonths = async () => {\n    const response = await fetch(`${url.URL}dashboard/totalexpensesmonths?api_token=${url.API_TOKEN}&user_id=${url.id}`)\n    return await response.json();\n};\n\nexport const getTotalExpensesMonth = async (data) => {\n    const response = await fetch(`${url.URL}dashboard/totalexpensesmonth?api_token=${url.API_TOKEN}&user_id=${url.id}&tipogasto=${data}`)\n    return await response.json();\n};"],"sourceRoot":""}