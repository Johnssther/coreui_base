{"version":3,"sources":["api/dashboard.js","views/components/carrucelinfinite.js","views/Widgets/Widget02.js","views/Dashboard/gbarras.js","views/Dashboard/table.js","traslate/es/dashboard.js","views/Dashboard/Dashboard.js","api/url.js","redux/actions/configuracion.js","redux/actions/personlexpenses.js","redux/actions/revenues.js","redux/actions/index.js","utils/errors.js","redux/actions/expensestype.js","api/typeexpense/typeexpense.js","services/expenses/expensestype.js","views/layout/main.js","views/components/loading.js"],"names":["getTotalExpensesMonths","a","fetch","url","URL","API_TOKEN","id","response","json","getTotalExpensesMonth","data","Carrucelinfinite","Widget02","this","props","className","cssModule","header","mainText","icon","color","footer","link","variant","children","attributes","padding","card","lead","style","classes","mapToCssModules","classNames","Card","CardBody","blockIcon","CardFooter","href","cardFooter","Component","defaultProps","Gbarras","state","gastoTotal","mes","console","log","borderRadius","CardHeader","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","map","item","precio_total_mes","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","coming_soon","coming_soon_item1","news","news_item1","news_item2","news_item3","to_explore","btn_en","btn_es","btn_fr","my_expenses","Dashboard","loading","expensestype","valueSelectExpensestype","languaje","dasboard_es","btn_color","getExpensesMonths","getExpensesMonth","getExpensesType","expensestypes","value","gasto","setState","success","onChange","newValue","onChangeSelect","Intl","NumberFormat","format","toString","connect","expense","personalexpenses","createpersonalexpense","connection","host","window","location","localStorage","getItem","JSON","parse","setConfiguracion","payload","type","setPersonalexpense","setPersonalexpenses","setRevenueIndex","setRevenueStore","setRevenueShow","setRevenueUpdate","setRevenueDelete","actions","configuracion","revenues","handleErrors","messg","errors","Swal","fire","title","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","reload","generalErrorApi","setExpensestype","getExpensesTyped","saveExpenseType","method","headers","Accept","body","stringify","api_token","tipogastos_name","tipogastos_active","tipogastos_usuario","store","dispatch","createExpenseType","createExpense","Main","useState","Loading"],"mappings":"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","file":"static/js/24.00a45993.chunk.js","sourcesContent":["import url from './url';\n\nexport const getTotalExpensesMonths = async () => {\n    const response = await fetch(`${url.URL}dashboard/totalexpensesmonths?api_token=${url.API_TOKEN}&user_id=${url.id}`)\n    return await response.json();\n};\n\nexport const getTotalExpensesMonth = async (data) => {\n    const response = await fetch(`${url.URL}dashboard/totalexpensesmonth?api_token=${url.API_TOKEN}&user_id=${url.id}&tipogasto=${data}`)\n    return await response.json();\n};","import React from 'react';\nimport InfiniteCarousel from 'react-leaf-carousel';\n\nimport {\n    Card, CardBody,\n    CardHeader,\n} from 'reactstrap';\n\nfunction Carrucelinfinite(props) {\n    const { data, color } = props\n    console.log(data, 'data');\n    console.log(color, 'color');\n\n    let mes_nombre = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre',]\n\n    return (\n        <div className=\"row\">\n        {\n            data.map((item, index) => {\n                return (\n                    <div className=\"col\" key={index}>\n                        <Card style={{ borderRadius: 20 }}>\n                            <CardHeader className=\"text-white\" style={{ background: color, borderTopLeftRadius: 20, borderTopRightRadius: 20 }}>\n                                <h4> {mes_nombre[item.mes - 1]} {item.anio} </h4>\n                            </CardHeader>\n                            <CardBody className=\"text-white\" style={{ background: color, borderBottomLeftRadius: 20, borderBottomRightRadius: 20 }}>\n                                Gastos: <h3> {`$ ${new Intl.NumberFormat().format(item.precio_total_mes)}`} </h3>\n                                <hr></hr>\n                            </CardBody>\n                        </Card>\n                    </div>\n                )\n            })\n        }\n        </div>\n\n    );\n}\n\nexport default Carrucelinfinite;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter } from 'reactstrap';\nimport classNames from 'classnames';\nimport { mapToCssModules } from 'reactstrap/lib/utils';\n\nconst propTypes = {\n  header: PropTypes.string,\n  mainText: PropTypes.string,\n  icon: PropTypes.string,\n  color: PropTypes.string,\n  variant: PropTypes.string,\n  footer: PropTypes.bool,\n  link: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};\n\nconst defaultProps = {\n  header: '$1,999.50',\n  mainText: 'Income',\n  icon: 'fa fa-cogs',\n  color: 'primary',\n  variant: '0',\n  link: '#',\n};\n\nclass Widget02 extends Component {\n  render() {\n    const { className, cssModule, header, mainText, icon, color, footer, link, children, variant, ...attributes } = this.props;\n\n    // demo purposes only\n    const padding = (variant === '0' ? { card: 'p-3', icon: 'p-3', lead: 'mt-2' } : (variant === '1' ? {\n      card: 'p-0', icon: 'p-4', lead: 'pt-3',\n    } : { card: 'p-0', icon: 'p-4 px-5', lead: 'pt-3' }));\n\n    const card = { style: 'clearfix', color: color, icon: icon, classes: '' };\n    card.classes = mapToCssModules(classNames(className, card.style, padding.card), cssModule);\n\n    const lead = { style: 'h5 mb-0', color: color, classes: '' };\n    lead.classes = classNames(lead.style, 'text-' + card.color, padding.lead);\n\n    const blockIcon = function (icon) {\n      const classes = classNames(icon, 'bg-' + card.color, padding.icon, 'font-2xl mr-3 float-left');\n      return (<i className={classes}></i>);\n    };\n\n    const cardFooter = function () {\n      if (footer) {\n        return (\n          <CardFooter className=\"px-3 py-2\">\n            <a className=\"font-weight-bold font-xs btn-block text-muted\" href={link}>Ver Más\n              <i className=\"fa fa-angle-right float-right font-lg\"></i></a>\n          </CardFooter>\n        );\n      }\n    };\n\n    return (\n      <Card>\n        <CardBody className={card.classes} {...attributes}>\n          {blockIcon(card.icon)}\n          <div className={lead.classes}>{header}</div>\n          <div className=\"text-muted text-uppercase font-weight-bold font-xs\">{mainText}</div>\n        </CardBody>\n        {cardFooter()}\n      </Card>\n    );\n  }\n}\n\nWidget02.propTypes = propTypes;\nWidget02.defaultProps = defaultProps;\n\nexport default Widget02;","\nimport React, { Component } from 'react';\nimport WidgetO from '../Widgets/Widget02'\n// Main Chart\nimport ApiDashboard from '../../api/dashboard';\nimport {\n  Card, CardBody,\n  CardHeader,\n  CardColumns\n} from 'reactstrap';\nimport Loading from '../components/loading'\n\nimport { Bar, Doughnut, Line, Pie, Polar, Radar } from 'react-chartjs-2';\n\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\n\nclass Gbarras extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gastoTotal: '',\n    }\n  }\n\n  render() {\n    const mes = this.props.mes;\n    console.log(mes, 'a');\n\n    return (\n      <>\n        <Card style={{ borderRadius:'10px' }}>\n          <CardHeader style={{ borderRadius:'10px 10px 0px 0px' }}>\n            Histograma del 2020\n              <div className=\"card-header-actions\">\n            </div>\n          </CardHeader>\n          <CardBody>\n            <div className=\"chart-wrapper\">\n              <Bar\n                data={\n                  {\n                    labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n                    datasets: [\n                      {\n                        label: 'Gastos mensuales',\n                        backgroundColor: this.props.color,\n                        borderColor: 'rgba(255,99,132,1)',\n                        borderWidth: 1,\n                        hoverBackgroundColor: 'rgba(168,132,8,66)',\n                        hoverBorderColor: 'rgba(255,99,132,1)',\n                        data: mes.map((item) => item.precio_total_mes),\n                      },\n                    ],\n                  }\n                }\n                options={\n                  {\n                    tooltips: {\n                      enabled: false,\n                      custom: CustomTooltips\n                    },\n                    maintainAspectRatio: false\n                  }\n                } />\n            </div>\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n\n}\n\nexport default Gbarras;","\nimport React, { Component } from 'react';\n\nimport {\n    Card, CardBody,\n    CardHeader,\n    CardColumns,\n    Badge,\n    Table,\n    Pagination,\n    PaginationItem,\n    PaginationLink,\n} from 'reactstrap';\n\nclass Datos extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            gastoTotal: '',\n\n        }\n    }\n    componentDidMount() {\n\n    }\n\n\n    render() {\n        const mes = this.props.mes;\n        console.log(mes, 'a');\n\n        return (\n            <>\n\n                <Card>\n                    <CardHeader>\n                        <i className=\"fa fa-align-justify\"></i> Mis finanzas en el año. <Badge color=\"success\">Beta</Badge>\n                    </CardHeader>\n                    <CardBody>\n                        <Table responsive striped>\n                            <thead>\n                                <tr style={{ background:'#FFA73D', color:'white' }}>\n                                    <th>2020</th>\n                                    <th>Enero</th>\n                                    <th>Febrero</th>\n                                    <th>Marzo</th>\n                                    <th>Abril</th>\n                                    <th>Mayo</th>\n                                    <th>Junio</th>\n                                    <th>Julio</th>\n                                    <th>Agosto</th>\n                                    <th>Septiembre</th>\n                                    <th>Octubre</th>\n                                    <th>Noviembre</th>\n                                    <th>Diciembre</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"success\">Ingresos</Badge>\n                                    </td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"danger\">Gastos</Badge>\n                                    </td>\n                                    <td>$600.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$0</td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"warning\">Ahorro</Badge>\n                                    </td>\n                                    <td>$1.800.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$0</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </CardBody>\n                </Card>\n            </>\n        );\n    }\n\n}\n\nexport default Datos;\n\n\n","export default {\n    coming_soon: 'Proximamente:',\n    coming_soon_item1: 'Seleccionar su idioma preferido (Multiidioma).',\n    news: 'Novedades',\n    news_item1: '-Ahora puedes registrar tus ingresos y verlos en el modulo de ingresos que hemos creado para tí.',\n    news_item2: '-Una vista mas limpia y minimalista.',\n    news_item3: '-Aun continuamos mejorando.',\n    to_explore: 'Explorar',\n    btn_en:'Ingles',\n    btn_es:'Español',\n    btn_fr:'Frances',\n    my_expenses:'Mis Gastos'\n}\n","\nimport React, { Component } from 'react';\n// Main Chart\nimport { getTotalExpensesMonths, getTotalExpensesMonth } from '../../api/dashboard';\n\nimport Carrucelinfinite from '../components/carrucelinfinite';\nimport { Link } from 'react-router-dom';\nimport Main from '../layout/main'\n\nimport {\n  Card, CardBody,\n  Alert,\n} from 'reactstrap';\n\nimport Loading from '../components/loading'\nimport Gbarras from '../Dashboard/gbarras'\nimport Datos from '../Dashboard/table'\n\nimport { connect } from 'react-redux'\nimport Select from 'react-select'\n\nimport { getExpensesType } from '../../services/expenses/expensestype'\n\n//traslate\nimport dasboard_es from '../../traslate/es/dashboard'\nimport dasboard_en from '../../traslate/en/dashboard'\nimport dasboard_fr from '../../traslate/fr/dashboard'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gastoTotal: '',\n      mes: [],\n      loading: true,\n      expensestype: [],\n      valueSelectExpensestype: '',\n      color: '#F55457',\n      languaje: dasboard_es,\n      btn_color: false,\n    }\n  }\n  async componentDidMount() {\n    this.getExpensesMonths()\n    this.getExpensesMonth()\n    await getExpensesType();\n\n    const expensestype = await this.props.expensestypes.map((item) => {\n      return { value: item.id, label: item.gasto }\n    })\n\n    this.setState({ expensestype })\n\n  }\n\n  //getExpenseMont card\n  async getExpensesMonth(data) {\n    try {\n      const response = await getTotalExpensesMonth(data)\n      this.setState({ gastoTotal: response, loading: false });\n\n    } catch (err) {\n      console.log(err)\n      this.setState({\n        loading: false\n      });\n    }\n  }\n  async getExpensesMonths() {\n    try {\n      const response = await getTotalExpensesMonths()\n      this.setState({ mes: response, loading: false});\n\n    } catch (err) {\n      console.log(err)\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  //getExpenseMonts\n  async onChangeSelect(value) {\n    await this.setState({ valueSelectExpensestype: value })\n    this.getExpensesMonth(this.state.valueSelectExpensestype)\n  }\n\n  render() {\n    const { languaje, btn_color } = this.state\n    if (this.state.loading) {\n      return (\n        <Loading loading={this.state.loading}></Loading>\n      );\n    }\n    return (\n      <Main success={false}>\n         <div className=\"offset-sm-3 col-sm-6\">\n            <Select\n              className=\"is-invalid\"\n              options={this.state.expensestype}\n              onChange={(newValue) => { this.onChangeSelect(newValue.value) }}\n            />\n          </div><br></br>\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Card style={{ borderRadius: '10px' }}>\n              <CardBody>\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <h6>{languaje.my_expenses}</h6>\n                    <h3>{'$' + new Intl.NumberFormat().format(this.state.gastoTotal.toString())}</h3>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Gbarras mes={this.state.mes} color={this.state.color} />\n          </div>\n        </div>\n        {/* <Datos /> */}\n      </Main>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  expensestypes: state.expensestype.expensestype,\n  expense: state.personalexpenses.createpersonalexpense,\n})\n\nexport default connect(mapStateToProps)(Dashboard)","\n/**\n*Peticiones api\n* @author John Alejandro || @Johnssther\n* @link http://johnalejandro.com\n* link Api\n* http://coysa.herokuapp.com/api/\n*/\n\nexport const connection = () => {\n    const host = window.location.host\n    let URL = null;\n    const API_TOKEN = localStorage.getItem('token');\n\n    if (host === \"localhost:3000\") {\n        URL = \"http://localhost/coysa-laravel6/public/api/\";\n    }\n    if (host === \"johnssther.github.io\") {\n        URL = \"http://coysa.herokuapp.com/api/\";\n    }\n    if (host === \"http://159.65.226.161:3000\") {\n        URL = \"http://localhost/coysa-laravel6/public/api/\";\n    }\n\n    return { URL, API_TOKEN }\n};\n\nexport default {\n    URL: connection().URL,\n    API_TOKEN: connection().API_TOKEN,\n    id:JSON.parse(localStorage.getItem('auth')) == null ? null:JSON.parse(localStorage.getItem('auth')).id\n}","export const setConfiguracion = payload => {\n    return {\n        type: 'SET_CONFIGURACION',\n        payload\n    }\n}","export const setPersonalexpense = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSE',\n        payload\n    }\n}\n\nexport const setPersonalexpenses = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSES',\n        payload\n    }\n}","export const setRevenueIndex = payload => {\n    return {\n        type: 'SET_REVENUE_INDEX',\n        payload\n    }\n}\n\nexport const setRevenueStore = payload => {\n    return {\n        type: 'SET_REVENUE_STORE',\n        payload\n    }\n}\n\nexport const setRevenueShow = payload => {\n    return {\n        type: 'SET_REVENUE_SHOW',\n        payload\n    }\n}\n\nexport const setRevenueUpdate = payload => {\n    return {\n        type: 'SET_REVENUE_UPDATE',\n        payload\n    }\n}\n\nexport const setRevenueDelete = payload => {\n    return {\n        type: 'SET_REVENUE_DELETE',\n        payload\n    }\n}","import * as configuracion from './configuracion'\nimport * as personalexpenses from './personlexpenses'\nimport * as expensestype from './expensestype'\nimport * as revenues from './revenues'\n\nexport const actions = {\n    configuracion,\n    personalexpenses,\n    expensestype,\n    revenues,\n}","import Swal from 'sweetalert2'\n\nexport const handleErrors = response => {\n    console.log(response);\n\n    //errores del api\n    if (response.success === false) {\n        throw response;\n    }\n    //otros errores\n    if (response) {\n        let messg = {\n            success: false,\n            errors: 'Ocurrio un error inesperado de conexión por favor recargue su navegador nuevamente.'\n        }\n        Swal.fire({\n            title: 'Atención',\n            text: messg.errors,\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Si, recargar de nuevo'\n        }).then((result) => {\n            if (result.value) {\n                window.location.reload();\n\n            }\n        })\n        if (response !== \"TypeError: Failed to fetch\") {\n            throw messg;\n        }\n        throw messg;\n\n    }\n};\n\nexport const generalErrorApi = response => {\n    throw response\n};\n\n/*\nresponseServer: function ( model, resp, opts ) {\n    window.Misc.removeSpinner(this.spinner);\n    if (!_.isUndefined(resp.success)) {\n        // response success or error\n        var text = resp.success ? '' : resp.errors;\n        if (_.isObject(resp.errors)) {\n            text = window.Misc.parseErrors(resp.errors);\n        }\n\n        if (!resp.success) {\n            alertify.error(text);\n            return;\n        }\n\n        window.Misc.redirect(window.Misc.urlFull(Route.route('facturas.show', {facturas: resp.id})));\n    }\n\n       /**\n        * Build URI with route and base url\n        */\n     /*  parseErrors: function ( errors ){\n        var text = '';\n        if( _.isObject( errors ) ){\n\n            var listError = '<ul>';\n\n            $.each(errors, function(field, item) {\n                 listError += '<li>'+ item[0] +'</li>';\n            });\n            listError += '</ul>';\n\n            text = listError;\n        }\n        return text;\n    },\n\n    */","export const setExpensestype = payload => {\n    return {\n        type: 'SET_EXPENSES_TYPE',\n        payload\n    }\n}","import url from '../url';\n\nexport const getExpensesTyped = async () => {\n    const response = await fetch(`${url.URL}tipogastos?api_token=${url.API_TOKEN}&user_id=${url.id}`)\n    return await response.json();\n};\nexport const saveExpenseType = async (data) => {\n    const response = await fetch(`${url.URL}tipogastos`,\n        {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                api_token: url.API_TOKEN,\n                tipogastos_name: data.tipogastos_name,\n                tipogastos_active: data.tipogastos_active,\n                tipogastos_usuario: data.tipogastos_usuario,\n            }),\n        },\n    );\n\n    return await response.json();\n};\n","import { getExpensesTyped, saveExpenseType } from '../../api/typeexpense/typeexpense';\n\nimport { handleErrors } from '../../utils/errors';\nimport { actions } from '../../redux/actions/index';\nimport { store } from '../../store';\n\nexport const getExpensesType = async () => {\n    try {\n        let expensestypes = await getExpensesTyped();\n        store.dispatch(actions.expensestype.setExpensestype(expensestypes))\n    } catch (e) {\n        handleErrors(e)\n    }\n}\n\n//store\nexport const createExpenseType = async (data) => {\n    try {\n        const createExpense = await saveExpenseType(data);\n        console.log(createExpense);\n    } catch (e) {\n        handleErrors(e)\n    }\n}","import React, { useState } from 'react';\nimport {\n    Container,\n    Alert\n} from 'reactstrap';\nimport Errors from '../components/error'\n\nconst Main = (props) => {\n    const { children, success } = props;\n    \n    const [visible, setVisible] = useState(true);\n    const onDismiss = () => setVisible(false);\n\n    return (\n        <div>\n            {/* {success.success === false ? null :\n                <Alert className=\"bg-danger\" isOpen={visible}>\n                    <b>Error: {success.error}</b><br></br>\n                    <b>{success.error === 'Error de conexion' ? 'Ocurrio un error inesperado al momento de intetar establecer conexión por favor recargue su navegador nuevamente.':''}  </b><br></br>\n                </Alert>\n            } */}\n            {/* <Errors text={success} /> */}\n            {children}\n        </div>\n    );\n};\n\nexport default Main","import React from 'react';\nimport './loading.css';\nimport Swal from 'sweetalert2'\n\n\nfunction Loading() {\n\n    return (\n        <>\n            <div className=\"container\">\n\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-4\">\n                        <div className=\"container center-block\">\n\n                            <div className=\"lds-facebook\">\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                            </div>\n                            <h4>Cargando...</h4>\n\n\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}\n\nexport default Loading;"],"sourceRoot":""}