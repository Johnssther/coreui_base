{"version":3,"sources":["views/components/inputField.js","views/components/inputCalendar.js","views/expenses/moduls/personalexpenses/components/main-component.js","views/expenses/moduls/personalexpenses/services/expensestype.js","views/expenses/moduls/personalexpenses/containers/create.js","api/api.js","redux/actions/configuracion.js","redux/actions/personlexpenses.js","redux/actions/expensestype.js","redux/actions/index.js","views/components/button.js","views/expenses/moduls/personalexpenses/services/personalexpenses.js"],"names":["InputField","label","placeholder","props","useField","field","meta","React","useState","didFocus","setDidFocus","showFeedback","value","trim","length","touched","className","htmlFor","name","error","onFocus","onClick","console","log","InputCalendar","helpers","setValue","toggle","setToggle","moment","inputFecha","setInputFecha","Toggle","Modal","isOpen","fade","style","width","ModalBody","backgroundColor","onChange","format","getExpenses","LoginComponent","onCreate","expensestype","tipogasto","setTipogasto","Card","CardHeader","CardBody","initialValues","gasto","cantidad","precio_unidad","precio_total","fecha","tipo_gasto","validationSchema","Yup","min","required","max","positive","onSubmit","values","setSubmitting","type","options","newValue","id","getExpensesType","a","API","expensestypes","map","item","store","dispatch","actions","setExpensestype","connect","state","setTimeout","alert","Api","host","window","location","this","URL","API_TOKEN","localStorage","getItem","userLogin","passwordLogin","fetch","method","headers","Accept","body","JSON","stringify","username","password","then","response","json","responseJson","catch","data","email","password_confirmation","api_token","precioUnidad","precioTotal","Fecha","user_id","id_usuario","tipogasto_id","parse","mes","setConfiguracion","payload","setPersonalexpense","setPersonalexpenses","configuracion","personalexpenses","ButtonComponent","onPress","color","expenses"],"mappings":"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","file":"static/js/22.53e3f0c3.chunk.js","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\n\nconst InputField = ({ label, placeholder, ...props }) => {\n    const [field, meta] = useField(props);\n    const [didFocus, setDidFocus] = React.useState(false);\n    const handleFocus = () => setDidFocus(true);\n    const showFeedback =\n        (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={field.name}>{label}</label>\n            <input\n                className={`form-control ${showFeedback ? (meta.error ? \"is-invalid\" : \"is-valid\") : \"\"}`}\n                {...field}\n                {...props}\n                placeholder={placeholder}\n                onFocus={handleFocus}\n                onClick={() => { console.log('fg') }}\n            />\n            <div className={`valid-feedback`}>\n                Completado\n                </div>\n            <div className={`invalid-feedback`}>\n                {meta.error}\n            </div>\n        </div>\n    );\n};\nexport default InputField","import React from 'react';\nimport { useField } from 'formik';\nimport { Modal, ModalBody } from 'reactstrap';\nimport moment from 'moment-jalaali'\nimport { Calendar } from 'react-datepicker2';\n\nconst InputCalendar = ({ label, placeholder, ...props }) => {\n  const [field, meta, helpers] = useField(props);\n  const { value } = meta;\n  const { setValue } = helpers;\n  const [didFocus, setDidFocus] = React.useState(false);\n  const [toggle, setToggle] = React.useState(false);\n  const [inputFecha, setInputFecha] = React.useState(moment());\n\n  const handleFocus = () => setDidFocus(true);\n  const showFeedback =\n    (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n  // Toggle Modal\n  const Toggle = () => {\n    setToggle(!toggle);\n  }\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label htmlFor={field.name}>{label}</label>\n        <input\n          className={`form-control ${showFeedback ? (meta.error ? \"is-invalid\" : \"is-valid\") : \"\"}`}\n          {...field}\n          {...props}\n          placeholder={placeholder}\n          onFocus={handleFocus}\n          onClick={() => { Toggle() }}\n        />\n        <div className={`valid-feedback`}>\n          Completado\n        </div>\n        <div className={`invalid-feedback`}>\n          {meta.error}\n        </div>\n      </div>\n\n      {/* Modal */}\n      <Modal\n        isOpen={toggle}\n        toggle={() => { Toggle() }}\n        fade={false}\n        style={{ width: '88%' }}\n      >\n        <ModalBody\n        >\n          <Calendar\n            style={{ backgroundColor: 'red' }}\n            onChange={inputFecha => { setValue((inputFecha.format('YYYY/M/D'))); setInputFecha(inputFecha); Toggle() }}\n            value={inputFecha}\n          />\n        </ModalBody>\n      </Modal>\n    </>\n  );\n\n};\nexport default InputCalendar","import React, { useState } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n} from 'reactstrap';\nimport Select from 'react-select'\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment-jalaali'\n\nimport InputField from '../../../../components/inputField';\nimport InputCalendar from '../../../../components/inputCalendar'\nimport ButtonComponent from '../../../../components/button'\n\n//services\nimport { getExpenses } from '../services/personalexpenses'\n\ngetExpenses();\n\nconst LoginComponent = (props) => {\n    const { onCreate, expensestype } = props;\n\n    const [tipogasto, setTipogasto] = useState(2);\n\n    return (\n        <div className=\"container\">\n            <Card>\n                <CardHeader>\n                    Ingresar Gasto\n                </CardHeader>\n                <CardBody>\n                    <Formik\n                        initialValues={{ gasto: '', cantidad: '', precio_unidad: '', precio_total: '', fecha: moment().format('YYYY/M/D'), tipo_gasto: tipogasto }}\n                        validationSchema={Yup.object({\n                            gasto: Yup.string()\n                                .min(3, 'Un gasto debe tener minimo 3 caracteres.')\n                                .required('El gasto es obligatorio'),\n                            cantidad: Yup.number()\n                                .max(99999, 'La cantidad no puede exceder de 99.999')\n                                .positive('La cantidad no puede ser negativa.')\n                                .required('La cantiad es obligatoria'),\n                            precio_unidad: Yup.number()\n                                .positive('El precio de la unidad no puede ser negativo.')\n                                .required('La cantiad es obligatoria'),\n                            precio_total: Yup.number()\n                                .positive('La cantidad no puede ser negativa.'),\n                            fecha: Yup.date()\n                                .required('La fecha es obligatoria'),\n                            tipo_gasto: Yup.number()\n                        })}\n                        onSubmit={(values, { setSubmitting }) => {\n                            onCreate(values);\n                            setSubmitting(true);\n                        }}\n                    >\n                        <Form>\n                            <div className=\"row\">\n                                <div className=\"col-sm-6\">\n                                    <InputCalendar name=\"fecha\" type=\"text\" label=\"Fecha\" placeholder=\"Ingrese la fecha del gasto.\" />\n                                </div>\n                                <div className=\"col-sm-6\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"tipo_gasto\">Tipo de gasto</label>\n                                        <Select options={expensestype} onChange={(newValue) => { setTipogasto(newValue.value) }} name=\"tipo_gasto\" id=\"tipo_gasto\" value=\"tipo_gasto\" />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-sm-3\">\n                                    <InputField name=\"cantidad\" type=\"text\" label=\"Cantidad\" placeholder=\"Ingrese una cantidad.\" />\n                                </div>\n                                <div className=\"col-sm-9\">\n                                    <InputField name=\"gasto\" type=\"text\" label=\"Gasto\" placeholder=\"Ingrese un gasto.\" />\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-sm-6\">\n                                    <InputField name=\"precio_unidad\" type=\"text\" label=\"Precio unid.\" placeholder=\"Ingrese el precio por unidad.\" />\n                                </div>\n                                <div className=\"col-sm-6\">\n                                    <InputField name=\"precio_total\" type=\"text\" label=\"Precio total\" placeholder=\"Ingrese el precio total (opcional).\" />\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-sm-6 offset-md-4\">\n                                    <button className=\"col-sm-3 m-1 btn btn-secondary btn-sm\" type=\"reset\">Reset</button>\n                                    <button className=\"col-sm-3 m-1 btn btn-dark btn-sm\" type=\"submit\">Register</button>\n                                </div>\n                            </div>\n                        </Form>\n                    </Formik>\n                </CardBody>\n            </Card>\n        </div >\n    );\n};\n\nexport default LoginComponent","//Llamadas al api\nimport API from '../../../../../api/api';\n\n//redux\nimport { actions } from '../../../../../redux/actions/index';\nimport { store } from '../../../../../store';\n\nexport const getExpensesType = async () => {\n    try {\n        const expensestypes =  await API.getExpensesType();\n        const expensestype = expensestypes.map((item) => {\n            return { value: item.id, label: item.gasto }\n        })\n        store.dispatch(actions.expensestype.setExpensestype(expensestype))\n    } catch (e) {\n        console.log('Ha ocurrido un error');    \n        console.log(e);    \n    }\n}","import  React from 'react';\n\nimport MainComponent from '../components/main-component'\n//services\nimport { getExpensesType } from '../services/expensestype'\n//redux\nimport { connect } from 'react-redux'\n\ngetExpensesType();\n\nfunction Create(props) {\n  const { expensestype } = props\n    const onCreate = (values) => {\n        console.log(values);\n        // props.history.push('/expenses/moduls/personalexpenses')\n        setTimeout(()=>{\n          alert('registrado')\n        },500)\n    }\n\n  return (\n    <MainComponent onCreate={onCreate} expensestype={expensestype}/>\n  );\n}\n\nconst mapStateToProps = state => ({\n  expensestype: state.expensestype.expensestype,\n})\n\nexport default connect(mapStateToProps)(Create)","/**\n*Peticiones api\n* @author John Alejandro || @Johnssther\n* @link http://JohnAlejandro.com\n* link Api\n* http://104.236.57.82/accesspark/public/api/login\n*/\n\nclass Api {\n    constructor() {\n        let host = window.location.host\n        if (host === \"localhost:3000\") {\n            this.URL = \"http://localhost/coysa/public/api/\";\n        }\n        if (host === \"johnssther.github.io\") {\n            this.URL = \"http://coysa.herokuapp.com/api/\";\n        }\n\n        this.API_TOKEN = localStorage.getItem('token');\n    }\n\n    //1. Login\n    onLogin(userLogin, passwordLogin) {\n        return fetch(`${this.URL}login`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: userLogin,\n                password: passwordLogin,\n            }),\n        }).then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson\n            })\n            .catch(error => {\n                throw error;\n            });\n    }\n    //1. Register users\n    registerUser(data) {\n        return fetch(`${this.URL}register`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: data.name,\n                email: data.email,\n                username: data.username,\n                password: data.password,\n                password_confirmation: data.password_confirmation,\n            }),\n        }).then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson\n            })\n            .catch(error => {\n                throw error;\n            });\n    }\n\n    saveExpenses(data) {\n        // B. Guardar los gastos\n        return fetch(`${this.URL}gastos`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                api_token: this.API_TOKEN,\n                gasto: data.gasto,\n                cantidad: data.cantidad,\n                precio_unidad: data.precioUnidad,\n                precio_total: data.precioTotal,\n                fecha: data.Fecha,\n                user_id: data.id_usuario,\n                tipogasto_id: data.tipogasto_id,\n            }),\n\n        }).then((response) => {\n            return response.json();\n        })\n            .catch(error => {\n                throw error;\n            });\n    }\n    // 3. Obtener todos los gastos\n\n    getExpenses(data) {\n        return fetch(`${this.URL}gastos?api_token=${this.API_TOKEN}\n        &user_id=${JSON.parse(localStorage.getItem('auth')).id}\n        &mes=${data.mes}`)\n\n            .then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson;\n            })\n            .catch((error) => {\n                throw error;\n            });\n    }\n\n    // 4. Obtiene los tipos de gastos\n\n    getExpensesType() {\n        return fetch(`${this.URL}tipogastos?api_token=${this.API_TOKEN}&user_id=${JSON.parse(localStorage.getItem('auth')).id}`)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson;\n            })\n            .catch((error) => {\n                throw error;\n            });\n    }\n\n    // 5. Elimina los gastos\n    // gastos/85\n    deleteExpense(id) {\n        // B. Guardar los gastos\n        return fetch(`${this.URL}gastos/${id}?api_token=${this.API_TOKEN}`, {\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        }).then((response) => {\n            return response.json();\n        })\n            .catch(error => {\n                throw error;\n            });\n    }\n\n\n} // close class\n//Total peticiones 2 : ??\nexport default new Api();\n","export const setConfiguracion = payload => {\n    return {\n        type: 'SET_CONFIGURACION',\n        payload\n    }\n}","export const setPersonalexpense = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSE',\n        payload\n    }\n}\n\nexport const setPersonalexpenses = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSES',\n        payload\n    }\n}","export const setExpensestype = payload => {\n    return {\n        type: 'SET_EXPENSES_TYPE',\n        payload\n    }\n}","import * as configuracion from './configuracion'\nimport * as personalexpenses from './personlexpenses'\nimport * as expensestype from './expensestype'\n\nexport const actions = {\n    configuracion,\n    personalexpenses,\n    expensestype,\n}","import React from 'react'\nimport {\n    Button,\n} from 'reactstrap';\n\nfunction ButtonComponent(props) {\n    const { name, onPress } = props;\n    return(\n        <Button color=\"dark\" className=\"col-sm-3 m-1 btn btn-secondary btn-sm\" onClick={onPress}>{name}</Button>\n    );\n}\nexport default ButtonComponent","//Llamadas al api\nimport API from '../../../../../api/api';\n\n//redux\nimport { actions } from '../../../../../redux/actions/index';\nimport { store } from '../../../../../store';\n\nexport const getExpenses = async () => {\n    let data = {\n        mes: null,\n    }\n\n    try {\n        const expenses =  await API.getExpenses(data);\n        store.dispatch(actions.personalexpenses.setPersonalexpenses(expenses))\n    } catch (e) {\n        console.log('Ha ocurrido un error');    \n        console.log(e);    \n    }\n}"],"sourceRoot":""}