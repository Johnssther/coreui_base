{"version":3,"sources":["api/url.js","views/Pages/Register/Register.js","api/registerUser.js"],"names":["connection","host","window","location","URL","API_TOKEN","localStorage","getItem","id","JSON","parse","Register","Component","constructor","props","super","this","state","name","username","email","password","password_confirmation","name_error","errors_example","validateForm","bind","registerUser","componentDidMount","event","key","target","value","setState","data","validForm","valid_email","test","minimo_name","length","minimo_username","minimo_password","async","response","fetch","concat","url","method","headers","Accept","body","stringify","json","history","push","render","React","createElement","className","Container","Row","Col","md","lg","xl","Card","CardBody","Form","Link","to","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","placeholder","autoComplete","onChange","Button","style","background","block","onClick"],"mappings":"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","file":"static/js/35.f354340d.chunk.js","sourcesContent":["\n/**\n*Peticiones api\n* @author John Alejandro || @Johnssther\n* @link http://johnalejandro.com\n* link Api\n* http://coysa.herokuapp.com/api/\n*/\n\nexport const connection = () => {\n    const host = window.location.host\n    let URL = null;\n    const API_TOKEN = localStorage.getItem('token');\n\n    if (host === \"localhost:3000\") {\n        URL = \"http://localhost/coysa-laravel6/public/api/\";\n    }\n    if (host === \"johnssther.github.io\") {\n        URL = \"https://x.johnr.top/api/\";\n    }\n    if (host === \"http://159.65.226.161:3000\") {\n        URL = \"http://localhost/coysa-laravel6/public/api/\";\n    }\n\n    URL = \"https://x.johnr.top/api/\";\n\n    return { URL, API_TOKEN }\n};\n\nexport default {\n    URL: connection().URL,\n    API_TOKEN: connection().API_TOKEN,\n    id:JSON.parse(localStorage.getItem('auth')) == null ? null:JSON.parse(localStorage.getItem('auth')).id\n}","import React, { Component } from 'react';\nimport {\n  Button, Card, CardBody, CardFooter, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row,\n\n} from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { registerUser } from '../../../api/registerUser';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: '',\n      username: '',\n      email: '',\n      password: '',\n      password_confirmation: '',\n      //errors\n      name_error: '',\n      errors_example:'',\n    }\n    this.validateForm = this.validateForm.bind(this);\n    this.registerUser = this.registerUser.bind(this);\n  }\n  componentDidMount() {\n    // API.registerUser()\n\n  }\n\n  validateForm(event) {\n    let key = event.target.name\n    let value = event.target.value\n    switch (key) {\n      case 'name':\n        this.setState({ name: value })\n        break;\n      case 'username':\n        this.setState({ username: value })\n        break;\n      case 'email':\n        this.setState({ email: value })\n        break;\n      case 'password':\n        this.setState({ password: value })\n        break;\n      case 'password_confirmation':\n        this.setState({ password_confirmation: value })\n        break;\n    }\n  }\n  async registerUser() {\n\n    let data = {\n      name: this.state.name,\n      username: this.state.username,\n      email: this.state.email,\n      password: this.state.password,\n      password_confirmation: this.state.password_confirmation,\n    }\n\n    const validForm = () => {\n      //validacion de correo\n      let regex = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n\n      let valid_email = regex.test(data.email) ? true : false;\n      let minimo_name = data.name.length > 4 ? true : false\n      let minimo_username = data.username.length > 4 ? true : false\n      let minimo_password = data.password.length > 7 ? true : false\n      let valid_password = data.password === data.password_confirmation ? true : false\n\n      if (!minimo_name) {\n        this.setState({ errors_example: 'Nombre minimo 4 caracteres'});\n        return false\n      }\n      if (!minimo_username) {\n        this.setState({ errors_example: 'Usuario minimo 4 caracteres'});\n        return false\n      }\n      if (!valid_email) {\n        this.setState({ errors_example: 'Correo invalido'});\n        return false\n      }\n      if (!minimo_password) {\n        this.setState({ errors_example: 'La contraseña debe tener minimo 8 caracteres'});\n        return false\n      }\n      if (!valid_password) {\n        this.setState({ errors_example: 'Las contraseñas con considen'});\n        return false\n      }\n      return true\n    }\n    if (validForm(data) === true) {\n      this.setState({ errors_example: 'Campos validos, puede continuar'});\n      await registerUser(data)  \n      this.props.history.push('/login')\n    }\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"app flex-row align-items-center\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\n              <Card className=\"mx-4\">\n                <CardBody className=\"p-4\">\n                  <Form>\n                    <h1>Registrate</h1>\n                    <Link to=\"/login\">\n                      Regresar al Login.\n                    </Link><br></br>\n                    <p className=\"text-muted\"></p>Crea tu cuenta\n                    <InputGroup className=\"mb-3\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                          <i className=\"icon-user\"></i>\n                        </InputGroupText>\n                      </InputGroupAddon>\n                      <Input type=\"text\" placeholder=\"Ingresa tu Nombre\" autoComplete=\"name\" name='name' onChange={this.validateForm} />\n                    </InputGroup>\n                    <p>{this.state.name_error}</p>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                          <i className=\"icon-user\"></i>\n                        </InputGroupText>\n                      </InputGroupAddon>\n                      <Input type=\"text\" placeholder=\"Ingresa un usuario\" autoComplete=\"username\" name='username' onChange={this.validateForm} />\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>@</InputGroupText>\n                      </InputGroupAddon>\n                      <Input type=\"text\" placeholder=\"Ingresa correo electrónico\" autoComplete=\"email\" name='email' onChange={this.validateForm} />\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                          <i className=\"icon-lock\"></i>\n                        </InputGroupText>\n                      </InputGroupAddon>\n                      <Input type=\"password\" placeholder=\"Ingresa Contraseña\" autoComplete=\"new-password\" name='password' onChange={this.validateForm} />\n                    </InputGroup>\n                    <InputGroup className=\"mb-4\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                          <i className=\"icon-lock\"></i>\n                        </InputGroupText>\n                      </InputGroupAddon>\n                      <Input type=\"password\" placeholder=\"Repita tu  contraseña\" autoComplete=\"new-password\" name='password_confirmation' onChange={this.validateForm} />\n                    </InputGroup>\n                    <Button style={{ background:'#FFA73D' }} block onClick={this.registerUser}>Registrarme</Button>\n                    <p>{ this.state.errors_example }</p>\n                  </Form>\n                </CardBody>\n                {/* <CardFooter className=\"p-4\">\n                  <Row>\n                    <Col xs=\"12\" sm=\"6\">\n                      <Button className=\"btn-facebook mb-1\" block><span>facebook</span></Button>\n                    </Col>\n                    <Col xs=\"12\" sm=\"6\">\n                      <Button className=\"btn-twitter mb-1\" block><span>twitter</span></Button>\n                    </Col>\n                  </Row>\n                </CardFooter> */}\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import url from './url';\n\nexport const registerUser = async (data) => {\n    const response = await fetch(`${url.URL}register`,\n        {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: data.name,\n                email: data.email,\n                username: data.username,\n                password: data.password,\n                password_confirmation: data.password_confirmation,\n            }),\n        },\n    );\n\n    return await response.json();\n};\n"],"sourceRoot":""}