{"version":3,"sources":["utils/errors.js","api/conection.js","redux/actions/configuracion.js","redux/actions/personlexpenses.js","redux/actions/index.js","redux/actions/expensestype.js","api/typeexpense/api.js","services/expenses/expensestype.js","views/layout/main.js","views/components/loading.js","api/dashboard.js","views/components/carrucelinfinite.js","views/Widgets/Widget02.js","views/Dashboard/gbarras.js","views/Dashboard/table.js","views/Dashboard/Dashboard.js"],"names":["handleErrors","response","console","log","success","messg","errors","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","window","location","reload","generalErrorApi","connection","host","URL","API_TOKEN","localStorage","getItem","setConfiguracion","payload","type","setPersonalexpense","setPersonalexpenses","actions","configuracion","personalexpenses","expensestype","setExpensestype","this","fetch","JSON","parse","id","json","responseJson","catch","error","data","method","headers","Accept","body","stringify","api_token","tipogastos_name","tipogastos_active","tipogastos_usuario","getExpensesType","a","API","expensestypes","store","dispatch","createExpenseType","saveExpenseType","createExpense","Main","props","children","useState","Loading","className","Carrucelinfinite","Widget02","cssModule","header","mainText","color","footer","link","variant","attributes","padding","card","lead","style","classes","mapToCssModules","classNames","Card","CardBody","blockIcon","CardFooter","href","cardFooter","Component","defaultProps","Gbarras","state","gastoTotal","mes","borderRadius","CardHeader","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","map","item","precio_total_mes","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","Dashboard","loading","valueSelectExpensestype","getExpensesMonths","getExpensesMonth","gasto","setState","ApiDashboard","getTotalExpensesMonth","e","getTotalExpensesMonths","onChange","newValue","onChangeSelect","Intl","NumberFormat","format","toString","connect","expense","createpersonalexpense"],"mappings":"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","file":"static/js/22.9003da0e.chunk.js","sourcesContent":["import Swal from 'sweetalert2'\n\nexport const handleErrors = response => {\n    console.log(response);\n\n    //errores del api\n    if (response.success === false) {\n        throw response;\n    }\n    //otros errores\n    if (response) {\n        let messg = {\n            success: false,\n            errors: 'Ocurrio un error inesperado de conexión por favor recargue su navegador nuevamente.'\n        }\n        Swal.fire({\n            title: 'Atención',\n            text: messg.errors,\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Si, recargar de nuevo'\n        }).then((result) => {\n            if (result.value) {\n                window.location.reload();\n\n            }\n        })\n        if (response !== \"TypeError: Failed to fetch\") {\n            throw messg;\n        }\n        throw messg;\n\n    }\n};\n\nexport const generalErrorApi = response => {\n    throw response\n};","\n/**\n*Peticiones api\n* @author John Alejandro || @Johnssther\n* @link http://johnAlejandro.com\n* link Api\n* http://coysa.herokuapp.com/api/\n*/\n\n\nexport const connection = () => {\n\n    const host = window.location.host\n    let URL = null;\n    const API_TOKEN = localStorage.getItem('token');\n\n    if (host === \"localhost:3000\") {\n        URL = \"http://localhost/coysa/public/api/\";\n    }\n    if (host === \"johnssther.github.io\") {\n        URL = \"http://coysa.herokuapp.com/api/\";\n    }\n    if (host === \"http://159.65.226.161:3000\") {\n        URL = \"http://localhost/coysa/public/api/\";\n    }\n\n    return {\n        URL: URL,\n        API_TOKEN: API_TOKEN\n    }\n};\n","export const setConfiguracion = payload => {\n    return {\n        type: 'SET_CONFIGURACION',\n        payload\n    }\n}","export const setPersonalexpense = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSE',\n        payload\n    }\n}\n\nexport const setPersonalexpenses = payload => {\n    return {\n        type: 'SET_PERSONALEXPENSES',\n        payload\n    }\n}","import * as configuracion from './configuracion'\nimport * as personalexpenses from './personlexpenses'\nimport * as expensestype from './expensestype'\n\nexport const actions = {\n    configuracion,\n    personalexpenses,\n    expensestype,\n}","export const setExpensestype = payload => {\n    return {\n        type: 'SET_EXPENSES_TYPE',\n        payload\n    }\n}","\nimport { connection } from '../conection';\n\nclass ApiTypeExpense {\n    constructor() {\n        this.URL = connection().URL;\n        this.API_TOKEN = localStorage.getItem('token');\n    }\n\n    //index\n    getExpensesType() {\n        return fetch(`${this.URL}tipogastos?api_token=${this.API_TOKEN}&user_id=${JSON.parse(localStorage.getItem('auth')).id}`)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson;\n            })\n            .catch((error) => {\n                throw error;\n            });\n    }\n\n    //store\n    /* Expense */\n    saveExpenseType(data) {\n        console.log(data, 'joh');\n\n        // B. Guardar los gastos\n        return fetch(`${this.URL}tipogastos`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                api_token: this.API_TOKEN,\n                tipogastos_name: data.tipogastos_name,\n                tipogastos_active: data.tipogastos_active,\n                tipogastos_usuario: data.tipogastos_usuario,\n            }),\n\n        }).then((response) => {\n            return response.json();\n        })\n            .catch(error => {\n                throw error;\n            });\n    }\n\n\n\n\n}\nexport default new ApiTypeExpense();\n","//Llamadas al api\nimport API from '../../api/typeexpense/api';\nimport { handleErrors } from '../../utils/errors';\n\n//redux\nimport { actions } from '../../redux/actions/index';\nimport { store } from '../../store';\n\nexport const getExpensesType = async () => {\n    try {\n        const expensestypes = await API.getExpensesType();\n        store.dispatch(actions.expensestype.setExpensestype(expensestypes))\n    } catch (e) {\n        console.log('Ha ocurrido un error');\n        console.log(e);\n        handleErrors(e)\n    }\n}\n\n//store\nexport const createExpenseType = async (data) => {\n    try {\n        const createExpense = await API.saveExpenseType(data);\n        console.log(createExpense);\n    } catch (e) {\n        handleErrors(e)\n    }\n}","import React, { useState } from 'react';\nimport {\n    Container,\n    Alert\n} from 'reactstrap';\nimport Errors from '../components/error'\n\nconst Main = (props) => {\n    const { children, success } = props;\n    \n    const [visible, setVisible] = useState(true);\n    const onDismiss = () => setVisible(false);\n\n    return (\n        <div>\n            {/* {success.success === false ? null :\n                <Alert className=\"bg-danger\" isOpen={visible}>\n                    <b>Error: {success.error}</b><br></br>\n                    <b>{success.error === 'Error de conexion' ? 'Ocurrio un error inesperado al momento de intetar establecer conexión por favor recargue su navegador nuevamente.':''}  </b><br></br>\n                </Alert>\n            } */}\n            {/* <Errors text={success} /> */}\n            {children}\n        </div>\n    );\n};\n\nexport default Main","import React from 'react';\nimport './loading.css';\nimport Swal from 'sweetalert2'\n\n\nfunction Loading() {\n\n    return (\n        <>\n            <div className=\"container\">\n\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-4\">\n                        <div className=\"container center-block\">\n\n                            <div className=\"lds-facebook\">\n                                <div></div>\n                                <div></div>\n                                <div></div>\n                            </div>\n                            <h4>Cargando...</h4>\n\n\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}\n\nexport default Loading;","/**\n*Peticiones api\n* @author John Alejandro || @Johnssther\n* @link http://JohnAlejandro.com\n* link Api\n* http://104.236.57.82/accesspark/public/api/login\n*/\n\nimport { generalErrorApi } from '../utils/errors';\nimport { connection } from './conection';\n\nclass ApiDashboard {\n    constructor() {\n        this.URL = connection().URL;\n        this.API_TOKEN = localStorage.getItem('token');\n    }\n    \n    getTotalExpensesMonths() {\n        return fetch(`${this.URL}dashboard/totalexpensesmonths?api_token=${this.API_TOKEN}&user_id=${JSON.parse(localStorage.getItem('auth')).id}`)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson;\n            })\n            .catch((error) => {\n                throw error;\n            });\n    }\n    getTotalExpensesMonth(data) {\n        \n        return fetch(`${this.URL}dashboard/totalexpensesmonth?api_token=${this.API_TOKEN}&user_id=${JSON.parse(localStorage.getItem('auth')).id}&tipogasto=${data}`)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                return responseJson;\n            })\n            .catch((error) => {\n                throw error;\n            });\n    }\n\n\n} // close class\n//Total peticiones 2 : ??\nexport default new ApiDashboard();\n","import React from 'react';\nimport InfiniteCarousel from 'react-leaf-carousel';\n\nimport {\n    Card, CardBody,\n    CardHeader,\n} from 'reactstrap';\n\nfunction Carrucelinfinite(props) {\n    const { data, color } = props\n    console.log(data, 'data');\n    console.log(color, 'color');\n\n    let mes_nombre = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre',]\n\n    return (\n        <div className=\"row\">\n        {\n            data.map((item, index) => {\n                return (\n                    <div className=\"col\" key={index}>\n                        <Card style={{ borderRadius: 20 }}>\n                            <CardHeader className=\"text-white\" style={{ background: color, borderTopLeftRadius: 20, borderTopRightRadius: 20 }}>\n                                <h4> {mes_nombre[item.mes - 1]} {item.anio} </h4>\n                            </CardHeader>\n                            <CardBody className=\"text-white\" style={{ background: color, borderBottomLeftRadius: 20, borderBottomRightRadius: 20 }}>\n                                Gastos: <h3> {`$ ${new Intl.NumberFormat().format(item.precio_total_mes)}`} </h3>\n                                <hr></hr>\n                            </CardBody>\n                        </Card>\n                    </div>\n                )\n            })\n        }\n        </div>\n\n    );\n}\n\nexport default Carrucelinfinite;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter } from 'reactstrap';\nimport classNames from 'classnames';\nimport { mapToCssModules } from 'reactstrap/lib/utils';\n\nconst propTypes = {\n  header: PropTypes.string,\n  mainText: PropTypes.string,\n  icon: PropTypes.string,\n  color: PropTypes.string,\n  variant: PropTypes.string,\n  footer: PropTypes.bool,\n  link: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n};\n\nconst defaultProps = {\n  header: '$1,999.50',\n  mainText: 'Income',\n  icon: 'fa fa-cogs',\n  color: 'primary',\n  variant: '0',\n  link: '#',\n};\n\nclass Widget02 extends Component {\n  render() {\n    const { className, cssModule, header, mainText, icon, color, footer, link, children, variant, ...attributes } = this.props;\n\n    // demo purposes only\n    const padding = (variant === '0' ? { card: 'p-3', icon: 'p-3', lead: 'mt-2' } : (variant === '1' ? {\n      card: 'p-0', icon: 'p-4', lead: 'pt-3',\n    } : { card: 'p-0', icon: 'p-4 px-5', lead: 'pt-3' }));\n\n    const card = { style: 'clearfix', color: color, icon: icon, classes: '' };\n    card.classes = mapToCssModules(classNames(className, card.style, padding.card), cssModule);\n\n    const lead = { style: 'h5 mb-0', color: color, classes: '' };\n    lead.classes = classNames(lead.style, 'text-' + card.color, padding.lead);\n\n    const blockIcon = function (icon) {\n      const classes = classNames(icon, 'bg-' + card.color, padding.icon, 'font-2xl mr-3 float-left');\n      return (<i className={classes}></i>);\n    };\n\n    const cardFooter = function () {\n      if (footer) {\n        return (\n          <CardFooter className=\"px-3 py-2\">\n            <a className=\"font-weight-bold font-xs btn-block text-muted\" href={link}>Ver Más\n              <i className=\"fa fa-angle-right float-right font-lg\"></i></a>\n          </CardFooter>\n        );\n      }\n    };\n\n    return (\n      <Card>\n        <CardBody className={card.classes} {...attributes}>\n          {blockIcon(card.icon)}\n          <div className={lead.classes}>{header}</div>\n          <div className=\"text-muted text-uppercase font-weight-bold font-xs\">{mainText}</div>\n        </CardBody>\n        {cardFooter()}\n      </Card>\n    );\n  }\n}\n\nWidget02.propTypes = propTypes;\nWidget02.defaultProps = defaultProps;\n\nexport default Widget02;","\nimport React, { Component } from 'react';\nimport WidgetO from '../Widgets/Widget02'\n// Main Chart\nimport ApiDashboard from '../../api/dashboard';\nimport {\n  Card, CardBody,\n  CardHeader,\n  CardColumns\n} from 'reactstrap';\nimport Loading from '../components/loading'\n\nimport { Bar, Doughnut, Line, Pie, Polar, Radar } from 'react-chartjs-2';\n\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\n\nclass Gbarras extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gastoTotal: '',\n    }\n  }\n\n  render() {\n    const mes = this.props.mes;\n    console.log(mes, 'a');\n\n    return (\n      <>\n        <Card style={{ borderRadius:'10px' }}>\n          <CardHeader style={{ borderRadius:'10px 10px 0px 0px' }}>\n            Histograma del 2020\n              <div className=\"card-header-actions\">\n            </div>\n          </CardHeader>\n          <CardBody>\n            <div className=\"chart-wrapper\">\n              <Bar\n                data={\n                  {\n                    labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n                    datasets: [\n                      {\n                        label: 'Gastos mensuales',\n                        backgroundColor: this.props.color,\n                        borderColor: 'rgba(255,99,132,1)',\n                        borderWidth: 1,\n                        hoverBackgroundColor: 'rgba(168,132,8,66)',\n                        hoverBorderColor: 'rgba(255,99,132,1)',\n                        data: mes.map((item) => item.precio_total_mes),\n                      },\n                    ],\n                  }\n                }\n                options={\n                  {\n                    tooltips: {\n                      enabled: false,\n                      custom: CustomTooltips\n                    },\n                    maintainAspectRatio: false\n                  }\n                } />\n            </div>\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n\n}\n\nexport default Gbarras;","\nimport React, { Component } from 'react';\n\nimport {\n    Card, CardBody,\n    CardHeader,\n    CardColumns,\n    Badge,\n    Table,\n    Pagination,\n    PaginationItem,\n    PaginationLink,\n} from 'reactstrap';\n\nclass Datos extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            gastoTotal: '',\n\n        }\n    }\n    componentDidMount() {\n\n    }\n\n\n    render() {\n        const mes = this.props.mes;\n        console.log(mes, 'a');\n\n        return (\n            <>\n\n                <Card>\n                    <CardHeader>\n                        <i className=\"fa fa-align-justify\"></i> Mis finanzas en el año. <Badge color=\"success\">Beta</Badge>\n                    </CardHeader>\n                    <CardBody>\n                        <Table responsive striped>\n                            <thead>\n                                <tr style={{ background:'#FFA73D', color:'white' }}>\n                                    <th>2020</th>\n                                    <th>Enero</th>\n                                    <th>Febrero</th>\n                                    <th>Marzo</th>\n                                    <th>Abril</th>\n                                    <th>Mayo</th>\n                                    <th>Junio</th>\n                                    <th>Julio</th>\n                                    <th>Agosto</th>\n                                    <th>Septiembre</th>\n                                    <th>Octubre</th>\n                                    <th>Noviembre</th>\n                                    <th>Diciembre</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"success\">Ingresos</Badge>\n                                    </td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"danger\">Gastos</Badge>\n                                    </td>\n                                    <td>$600.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$0</td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <Badge color=\"warning\">Ahorro</Badge>\n                                    </td>\n                                    <td>$1.800.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$1.000.000</td>\n                                    <td>$0</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </CardBody>\n                </Card>\n            </>\n        );\n    }\n\n}\n\nexport default Datos;\n\n\n","\nimport React, { Component } from 'react';\n// Main Chart\nimport ApiDashboard from '../../api/dashboard';\nimport Carrucelinfinite from '../components/carrucelinfinite';\nimport Main from '../layout/main'\n\nimport {\n  Card, CardBody,\n  CardHeader, CardColumns\n} from 'reactstrap';\n\nimport Loading from '../components/loading'\nimport Gbarras from '../Dashboard/gbarras'\nimport Datos from '../Dashboard/table'\n\nimport { connect } from 'react-redux'\nimport Select from 'react-select'\n\nimport { getExpensesType } from '../../services/expenses/expensestype'\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gastoTotal: '',\n      mes: [],\n      loading: true,\n      expensestype: [],\n      valueSelectExpensestype: '',\n      color: '#F55457',\n    }\n  }\n  async componentDidMount() {\n    this.getExpensesMonths()\n    this.getExpensesMonth()\n    await getExpensesType();\n\n    const expensestype = await this.props.expensestypes.map((item) => {\n      return { value: item.id, label: item.gasto }\n    })\n\n    this.setState({\n      expensestype\n    })\n\n  }\n\n  //getExpenseMont card\n  getExpensesMonth(data) {\n    ApiDashboard.getTotalExpensesMonth(data)\n      .then((response) => {\n        this.setState({\n          gastoTotal: response,\n          loading: false\n        });\n      })\n      .catch(e => {\n        console.log(e)\n        this.setState({\n          loading: false\n        });\n      })\n  }\n  //getExpenseMonts slider\n  getExpensesMonths() {\n    ApiDashboard.getTotalExpensesMonths()\n      .then((response) => {\n        this.setState({\n          mes: response,\n          loading: false\n        });\n      })\n      .catch(e => {\n        console.log(e)\n        this.setState({\n          loading: false\n        });\n      })\n  }\n  //getExpenseMonts\n  async onChangeSelect(value) {\n    await this.setState({ valueSelectExpensestype: value })\n    this.getExpensesMonth(this.state.valueSelectExpensestype)\n  }\n\n\n\n  render() {\n\n    if (this.state.loading) {\n      return (\n        <Loading loading={this.state.loading}></Loading>\n      );\n    }\n    return (\n      <Main success={false}>\n\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Select\n              className=\"is-invalid\"\n              options={this.state.expensestype}\n              onChange={(newValue) => { this.onChangeSelect(newValue.value) }}\n            />\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Card style={{ borderRadius:'10px' }}>\n              <CardBody>\n                <div className=\"row\">\n                  <div className=\"col\">\n                        <h6>Mis Gastos</h6>\n                        <h3>{'$' + new Intl.NumberFormat().format(this.state.gastoTotal.toString())}</h3>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"offset-sm-3 col-sm-6\">\n            <Gbarras mes={this.state.mes} color={this.state.color} />\n          </div>\n        </div>\n        {/* <Datos /> */}\n      </Main>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  expensestypes: state.expensestype.expensestype,\n  expense: state.personalexpenses.createpersonalexpense,\n})\n\nexport default connect(mapStateToProps)(Dashboard)"],"sourceRoot":""}